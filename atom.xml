<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Uncle Qiu</title>
  
  <subtitle>A lazy programmer&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://uncleqiu.github.io/uncleqiu/"/>
  <updated>2020-06-13T16:46:38.142Z</updated>
  <id>https://uncleqiu.github.io/uncleqiu/</id>
  
  <author>
    <name>Uncle Qiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP代码加密之Zend Guard使用笔记</title>
    <link href="https://uncleqiu.github.io/uncleqiu/2020/06/13/PHP%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%AF%86%E4%B9%8BZend-Guard%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>https://uncleqiu.github.io/uncleqiu/2020/06/13/PHP代码加密之Zend-Guard使用笔记/</id>
    <published>2020-06-13T15:54:26.000Z</published>
    <updated>2020-06-13T16:46:38.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Zend-Guard介绍"><a href="#Zend-Guard介绍" class="headerlink" title="Zend Guard介绍"></a>Zend Guard介绍</h2><p>Zend Guard是一个对PHP代码进行加密的工具。<a id="more"></a> 是市面上比较成熟可靠的PHP源码加密产品，由Zend公司开发，使用Zend Guard可混淆和保护PHP代码，防止逆向工程和未经授权的使用。使用Zend Guard试用版加密的代码会在14天后过期，所以想要长期使用则需要购买Zend Guard正式许可。</p><p>我所在的公司有做一些商业项目，交付项目时不提供PHP源码，只提供加密后的代码，所以买了许可证。(貌似是5000RMB)，当时老大给了一个<code>zend_guard.zl</code>的授权文件。看了一下文件内容有包含公司名称信息。</p><h2 id="Zend-Guard缺点-待补充"><a href="#Zend-Guard缺点-待补充" class="headerlink" title="Zend Guard缺点(待补充)"></a>Zend Guard缺点(待补充)</h2><ul><li>目前最新版本是Zend Guard7,对php版本的支持最高是php5.6，不支持php7，如果项目使用php7版本的就无法加密了</li><li>仅支持对PHP、inc等文件的加密</li></ul><h2 id="安装Zend-Guard"><a href="#安装Zend-Guard" class="headerlink" title="安装Zend Guard"></a>安装Zend Guard</h2><p>以下我们来安装一下Zend Guard</p><h3 id="1-Zend-Guard下载地址"><a href="#1-Zend-Guard下载地址" class="headerlink" title="1.Zend Guard下载地址"></a>1.Zend Guard下载地址</h3><p><a href="https://www.zend.com/downloads/zend-guard" target="_blank" rel="noopener">Zend Guard下载地址</a></p><p>看下图，我们选择Zend Guard <code>Windows 64位系统的 7版本</code> 的安装包进行下载。下载完成后双击进行下一步下一步傻瓜式安装。</p><p><img src="Zend-Guard-Download.png" alt="Zend Guard选择版本"></p><h3 id="2-注册许可证信息"><a href="#2-注册许可证信息" class="headerlink" title="2.注册许可证信息"></a>2.注册许可证信息</h3><p>下载完成后，我们打开软件是 <code>trial version</code> 也就是试用版的，上面我们提到了，试用版加密的代码是有有效期的，所以我们需要对软件进行许可证注册。</p><p>选择[Help]-&gt;[Register]-&gt;[finish]，如下图：</p><p>①.使用许可证文件<code>zend_guard.zl</code>或者填写许可证内容进行注册</p><p>②.点击<code>Finish</code>完成</p><p><img src="Zend-Guard-Register.png" alt="Zend Guard注册许可证信息"></p><p>点击完成成功之后我们的Zend Guard软件的 <code>trial version</code> 试用版字样消失，到这里我们的Zend Guard就安装并激活完成。</p><p><img src="Trial-Version.png" alt="Zend Guard激活成功"></p><h2 id="Zend-Guard加密PHP源码"><a href="#Zend-Guard加密PHP源码" class="headerlink" title="Zend Guard加密PHP源码"></a>Zend Guard加密PHP源码</h2><p>安装完成后的下一步我们来介绍一下如何使用Zend Guard加密PHP源码文件。</p><h3 id="1-编写测试文件代码"><a href="#1-编写测试文件代码" class="headerlink" title="1.编写测试文件代码"></a>1.编写测试文件代码</h3><p>①.我们创建一个源代码目录 <code>source_code</code> ，然后在目录下创建一个PHP代码测试文件 <code>test.php</code>，如下图：</p><p>②.然后再创建一个加密后的PHP文件存放目录 <code>encrypt_code</code>。</p><p><img src="PHP-Source-Code.png" alt="PHP测试代码"></p><h3 id="2-新建一个项目"><a href="#2-新建一个项目" class="headerlink" title="2.新建一个项目"></a>2.新建一个项目</h3><p>选择[File]-&gt;[New]-&gt;[Zend Guard Project]，然后按照下图操作</p><p><img src="New-Project.png" alt="New Project"><br><img src="Add-File-And-Folder.png" alt="Add File And Folder"></p><h3 id="3-配置产品许可证信息"><a href="#3-配置产品许可证信息" class="headerlink" title="3.配置产品许可证信息"></a>3.配置产品许可证信息</h3><p>①.选择加密项目，点击安全配置</p><p>②.设置加密过期时间</p><p>③.选择证书支持</p><p>操作如下图</p><p><img src="Security.png" alt="Security"></p><p>④.生成产品证书</p><p><img src="Create-Product-License.png" alt="Create Product License"></p><h3 id="4-加密PHP源代码"><a href="#4-加密PHP源代码" class="headerlink" title="4.加密PHP源代码"></a>4.加密PHP源代码</h3><p>点击运行加密文件，查看控制台输出信息</p><p><img src="Encrypt.png" alt="Encrypt"></p><p>我们去加密后的PHP文件存放目录 <code>encrypt_code</code> 查看一下加密后文件的样子，PHP原来的明文代码已经加密成二进制文件了</p><p><img src="Encrypt-File.png" alt="Encrypt File"></p><h3 id="5-运行加密文件"><a href="#5-运行加密文件" class="headerlink" title="5.运行加密文件"></a>5.运行加密文件</h3><p>将加密后的PHP文件部署至服务器然后运行，我们可以看到输出 <code>报错了</code> ，原因是我们没有安装一个叫 <code>Zend Guard Loader</code> 的扩展。</p><p><img src="Error.png" alt="Error"></p><h3 id="6-安装Zend-Guard-Loader扩展"><a href="#6-安装Zend-Guard-Loader扩展" class="headerlink" title="6.安装Zend Guard Loader扩展"></a>6.安装Zend Guard Loader扩展</h3><h4 id="下载Zend-Guard-Loader安装包"><a href="#下载Zend-Guard-Loader安装包" class="headerlink" title="下载Zend Guard Loader安装包"></a>下载Zend Guard Loader安装包</h4><p><a href="https://www.zend.com/downloads/zend-guard-loader" target="_blank" rel="noopener">Zend Guard Loader下载地址</a></p><h4 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压文件</span></span><br><span class="line">tar zxvf zend-loader-php5.6-linux-x86_64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入目录查看有什么内容</span></span><br><span class="line">cd zend-loader-php5.6-linux-x86_64</span><br></pre></td></tr></tbody></table></figure><h4 id="目录内容如下"><a href="#目录内容如下" class="headerlink" title="目录内容如下"></a>目录内容如下</h4><p><code>opcache.so</code> opcache扩展</p><p><code>README.txt</code> README文件</p><p><code>ZendGuardLoader.so</code> Zend Guard Loader扩展</p><p><img src="Dir-Content.png" alt="Dir Content"></p><p>然后我们把刚刚生成的 <code>encrypt-test.zl</code> 文件上传至服务器</p><h3 id="7-配置php-ini"><a href="#7-配置php-ini" class="headerlink" title="7.配置php.ini"></a>7.配置php.ini</h3><p>接下来修改php.ini文件，修改配置内容如下</p><p><img src="php.ini.png" alt="PHP CONFIG"></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Zend Guard Loader扩展文件路径</span></span><br><span class="line">zend_extension="/usr/local/php5/lib/modules/ZendGuardLoader.so"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用 Zend Guard Loader</span></span><br><span class="line">zend_loader.enable=1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁用许可证检查</span></span><br><span class="line">zend_loader.disable_licensing=0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置混淆水平</span></span><br><span class="line">zend_loader.obfuscation_level_support=3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置授权许可证文件路径</span></span><br><span class="line">zend_loader.license_path=/usr/local/src/encrypt-test.zl</span><br></pre></td></tr></tbody></table></figure><p>配置完成后，需要重启php-fpm，重启完成之后再查看 <code>phpinfo</code></p><p><img src="Zend-Engine.png" alt="Zend Engine"><br><img src="Zend-Guard-Loader-Ext.png" alt="php.ini"></p><p>最后一步，我们继续访问刚才加密后的 <code>test.php</code>文件就可以访问成功啦。</p><p><img src="Success.png" alt="Success"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Zend-Guard介绍&quot;&gt;&lt;a href=&quot;#Zend-Guard介绍&quot; class=&quot;headerlink&quot; title=&quot;Zend Guard介绍&quot;&gt;&lt;/a&gt;Zend Guard介绍&lt;/h2&gt;&lt;p&gt;Zend Guard是一个对PHP代码进行加密的工具。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://uncleqiu.github.io/uncleqiu/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://uncleqiu.github.io/uncleqiu/tags/PHP/"/>
    
      <category term="加密" scheme="https://uncleqiu.github.io/uncleqiu/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构学习笔记</title>
    <link href="https://uncleqiu.github.io/uncleqiu/2020/05/22/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://uncleqiu.github.io/uncleqiu/2020/05/22/算法与数据结构学习笔记/</id>
    <published>2020-05-21T17:10:23.000Z</published>
    <updated>2020-05-24T15:36:26.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法与数据结构简单介绍"><a href="#算法与数据结构简单介绍" class="headerlink" title="算法与数据结构简单介绍"></a>算法与数据结构简单介绍</h2><p>什么是数据结构与算法？<a id="more"></a> 根据我的理解，数据结构就是指一组数据的存储结构，而算法就是操作这些数据的方法。数据结构与算法是相辅相成的，数据结构是为算法服务的，而算法也是作用在特定的数据结构之上的。</p><h2 id="为什么要学习数据结构与算法"><a href="#为什么要学习数据结构与算法" class="headerlink" title="为什么要学习数据结构与算法"></a>为什么要学习数据结构与算法</h2><h3 id="可以写出性能更好的代码"><a href="#可以写出性能更好的代码" class="headerlink" title="可以写出性能更好的代码"></a>可以写出性能更好的代码</h3><p>大佬们都说算法是一个程序员的内功，<code>一个好的程序 = 数据结构 + 算法</code>，学好算法与数据结构可以使你的程序性能更好，写出更优的程序，可以解决更快、更省的处理、存储数据。</p><h3 id="拓展自己的思维"><a href="#拓展自己的思维" class="headerlink" title="拓展自己的思维"></a>拓展自己的思维</h3><p>算法实际上就是一种解题的思路与方法，可以帮助自己能更好的理解一些大佬们的项目源码。现在有很多成型的框架，只停留在用的阶段如简单的<code>CURD</code>，用的时候也没有太考虑性能的问题，也不清楚底层的设计原理。虽说工作中大部分用不到，拓展下思维也是不错的。</p><h3 id="做一个有追求的码农"><a href="#做一个有追求的码农" class="headerlink" title="做一个有追求的码农"></a>做一个有追求的码农</h3><p>平时工作上CURD的工作比较多，很多深层次的东西也都没有接触过，原理、设计模式也懂得不多，几乎是面向领导编程。所以想多练练基本功，就好比房子也得把地基打好，本人作为一名很渣的PHPer，学习一下算法，然后顺便做下笔记，希望做一个有追求的码农吧~~</p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>什么才是好的算法呢，举个例子，A同学与B同学分别处理一个相同的需求，A同学写的代码执行时间是100ms,占用内存10M，而B同学写的代码执行时间是10s，占用内存为100M。那么就可以认为A同学的程序算法比B同学的更优。一般情况下，我们以<code>运行时间</code>及<code>占用内存</code>两个指标还衡量一个算法的好坏。</p><h3 id="事后统计法"><a href="#事后统计法" class="headerlink" title="事后统计法"></a>事后统计法</h3><p>事后统计法大概的意思就是先把代码跑一遍，然后再去统计这个算法代码用的时长以及它所占用的内存大小，这种方法存在一定的问题。</p><h4 id="事后统计法弊端"><a href="#事后统计法弊端" class="headerlink" title="事后统计法弊端"></a>事后统计法弊端</h4><h5 id="1-与环境相关"><a href="#1-与环境相关" class="headerlink" title="1.与环境相关"></a>1.与环境相关</h5><p>在不同的测试环境中对测试的结果差异可能会很大，举个例子，我们用同一段代码分别在超级计算机与普通计算机上运行，运行的速度肯定是超级计算比较快。</p><h5 id="2-与数据规模相关"><a href="#2-与数据规模相关" class="headerlink" title="2.与数据规模相关"></a>2.与数据规模相关</h5><p>当你在使用同一个算法时，不同的数据规模的执行效率可能是平方阶的增加，在相同的数据规模下，执行的效率也会有很大差别，比如排序算法，如果数据本来就是有序的，算法可能不需要做任何排序操作，执行效率会很快，在同等的数据规模下数据是完全倒序的，那么执行效率差别会比较大。所以在数据规模比较小或者数据不确定的情况下，使用事后统计法无法真实的反应出算法的性能。</p><h3 id="渐近复杂度"><a href="#渐近复杂度" class="headerlink" title="渐近复杂度"></a>渐近复杂度</h3><p>事后统计法存在很大的弊端，那么我们就应该事先对程序进行粗略的性能分析，这就是复杂度分析，也叫渐进复杂度，其中又包括渐近时间复杂度(时间复杂度)跟渐近空间复杂度(空间复杂度)，主要的作用是来分析算法执行效率与数据规模之间的增长关系。</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>算法的时间复杂度是一个函数，描述算法的运行时间，使用<code>大O符号</code>表示。这样描述还是有点难懂的，我们用下面的代码来分析一下。</p><h5 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h5><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//计算1+2+3+....+n的和</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">calc</span><span class="params">($n)</span> </span>{</span><br><span class="line">        $sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= $n; $i++) {</span><br><span class="line">            $sum += $i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> $sum;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>以上的代码声明了一个函数，函数的作用是<code>计算1+2+3+....+n的和</code>，我们现在估算一下这段代码需要执行的时间。我们假设每行代码的执行效率是一样的，需要一个<code>time</code>时间。那么第4行代码执行一次需要1个time的执行时间，第5、6行都执行了n遍，那么就是<code>2n*time</code>个执行时间，那么这段代码总的执行时间就为<code>(2n+1)*time</code>。可以看出代码执行时间<code>T(n)</code>与每行代码执行次数成正比。</p><p>由此我们可以总结出一个公式</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(n) = O(f(n))</span><br></pre></td></tr></tbody></table></figure><p><code>T(n)</code>代表代码所执行的时间，<code>n</code>代表数据的规模，<code>f(n)</code>代表每行代码所执行的次数总和。公式中的<code>O</code>表示代码执行时间<code>T(n)</code>与<code>f(n)</code>表达式成正比。所以第一个例子我们可以得出<code>T(n) = O(2n+1)</code>，这就是<code>大O表示法</code>，它实际并不代表代码真正的执行时间，它主要是来粗略的分析算法执行效率，表示代码执行时间与数据规模的增长关系。</p><h5 id="忽略表达式的某些部分"><a href="#忽略表达式的某些部分" class="headerlink" title="忽略表达式的某些部分"></a>忽略表达式的某些部分</h5><p>我们在计算时间复杂度的时候是否真的要一行一行的去计算，如果有好几千行的代码也要一行一行的去计算么，答案显然不是的，那我们是否可以忽略掉表达式的某些部分，所以我们一般计算大O的时间复杂度，会忽略掉公式中的<code>常量、低阶、系数</code>，只考虑阶数高的那一部分。<code>所以一般在分析代码的复杂度时，只关注循环执行次数最多的那一段代码就可以了</code>。还是举个例子，如下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 以下是时间开销与数据规模n的关系</span><br><span class="line">  1. T(n) = O(2n + 1)</span><br><span class="line">  2. T(n) = O(n^2 + 2n)</span><br><span class="line">  3. T(n) = O(n^3 + n^2 + 3n)</span><br></pre></td></tr></tbody></table></figure><p>我们认为当数据规模n足够大的时候，我们可以忽略更低阶的部分表达式(抓大放小)</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">若n = 2000时，则</span><br><span class="line">2n + 1 = 4001                      VS           2n = 4000</span><br><span class="line">n^2 + 2n = 4004000                 VS           n^2 = 4000000</span><br><span class="line">n^3 + n^2 + 3n = 8004006000        VS           n^3 = 8000000000</span><br></pre></td></tr></tbody></table></figure><p>由上可得按比例来算，相差结果并不大，我们会将<code>常量、低阶、系数</code>进行忽略，只取阶数高的部分，其实<code>2n</code>我们还可以将<code>2</code>进行忽略把它的时间复杂度变成<code>O(n)</code>。总结的话就是<code>总的时间复杂度等于阶数最高的那一部分代码</code>，总结成公式的话就是以下，称为加法规则。</p><p>下面代表如果T1(n) = O(f(n)), T2(n) = O(g(n))，可以转换成下面这样。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多项相加，只保留最高阶的项，且系数变为1</span><br><span class="line">T(n) = T1(n) + T2(n) = O(f(n)) + O(g(n)) = O(max(f(n), g(n)))</span><br></pre></td></tr></tbody></table></figure><p>除了加法规则还有乘法规则，如果T1(n) = O(f(n))，T2(n) = O(g(n))，那么它总的时间复杂度就是以下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多项相乘都保留</span><br><span class="line">T(n) = T1(n) * T2(n) = O(f(n)) * O(g(n)) = O(f(n) * g(n))</span><br></pre></td></tr></tbody></table></figure><p>比如下面嵌套两层循环的代码，他的复杂度就为O(n^2)，嵌套循环代码的复杂度等于外层与内层的乘积。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">($n)</span> </span>{</span><br><span class="line">        $sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $n; $i++) {</span><br><span class="line">            <span class="keyword">for</span> ($j = <span class="number">0</span>; $j &lt; $n; $j++) {</span><br><span class="line">                $sum += ($i + $j);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> $sum;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>我们来看下面这段代码，看下他的复杂度是多少</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">($n)</span> </span>{</span><br><span class="line">        $num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ($num &lt; $n) {</span><br><span class="line">            $num *= <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> $num;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>暂时先写到这，后续继续更新。。。。。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法与数据结构简单介绍&quot;&gt;&lt;a href=&quot;#算法与数据结构简单介绍&quot; class=&quot;headerlink&quot; title=&quot;算法与数据结构简单介绍&quot;&gt;&lt;/a&gt;算法与数据结构简单介绍&lt;/h2&gt;&lt;p&gt;什么是数据结构与算法？&lt;/p&gt;
    
    </summary>
    
      <category term="Data Structures &amp; Algorithms" scheme="https://uncleqiu.github.io/uncleqiu/categories/Data-Structures-Algorithms/"/>
    
    
      <category term="Data Structures" scheme="https://uncleqiu.github.io/uncleqiu/tags/Data-Structures/"/>
    
      <category term="Algorithms" scheme="https://uncleqiu.github.io/uncleqiu/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Docker笔记</title>
    <link href="https://uncleqiu.github.io/uncleqiu/2020/04/14/Docker%E7%AC%94%E8%AE%B0/"/>
    <id>https://uncleqiu.github.io/uncleqiu/2020/04/14/Docker笔记/</id>
    <published>2020-04-14T14:26:34.000Z</published>
    <updated>2020-04-14T15:41:01.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker基本介绍"><a href="#Docker基本介绍" class="headerlink" title="Docker基本介绍"></a>Docker基本介绍</h2><p><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> 是一个开源的应用容器引擎，基于<code>Go</code> 语言 并遵从Apache2.0协议开源。<a id="more"></a> Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h3 id="Docker的应用场景"><a href="#Docker的应用场景" class="headerlink" title="Docker的应用场景"></a>Docker的应用场景</h3><ul><li>Web应用的自动化打包和发布。</li><li>自动化测试和持续集成、发布。</li><li>在服务型环境中部署和调整数据库或其他的后台应用。</li><li>从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。  </li></ul><h3 id="Docker的优点"><a href="#Docker的优点" class="headerlink" title="Docker的优点"></a>Docker的优点</h3><h4 id="更高效的利用系统资源"><a href="#更高效的利用系统资源" class="headerlink" title="更高效的利用系统资源"></a>更高效的利用系统资源</h4><p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p><h4 id="更快速的启动时间"><a href="#更快速的启动时间" class="headerlink" title="更快速的启动时间"></a>更快速的启动时间</h4><p>传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p><h4 id="一致的运行环境"><a href="#一致的运行环境" class="headerlink" title="一致的运行环境"></a>一致的运行环境</h4><p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现<strong>「这段代 码在我机器上没问题啊」</strong>这类问题。</p><h4 id="持续交付和部署"><a href="#持续交付和部署" class="headerlink" title="持续交付和部署"></a>持续交付和部署</h4><p>对开发和运维（DevOps）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。 使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 <code>Dockerfile</code> 来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合持续部署(Continuous Delivery/Deployment)系统进行自动部署。而且使用<code>Dockerfile</code>使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p><h4 id="更轻松的迁移"><a href="#更轻松的迁移" class="headerlink" title="更轻松的迁移"></a>更轻松的迁移</h4><p>由于Docker确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p><h4 id="更轻松的维护和扩展"><a href="#更轻松的维护和扩展" class="headerlink" title="更轻松的维护和扩展"></a>更轻松的维护和扩展</h4><p>Docker使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p><h3 id="Docker的一些名词术语"><a href="#Docker的一些名词术语" class="headerlink" title="Docker的一些名词术语"></a>Docker的一些名词术语</h3><ul><li>host   宿主机  </li><li>image  镜像  </li><li>container  容器  </li><li>registry  仓库  </li><li>deamon  守护进程  </li><li>client  客户端  </li></ul><h3 id="国内一些仓库"><a href="#国内一些仓库" class="headerlink" title="国内一些仓库"></a>国内一些仓库</h3><ul><li>aliyun(需要登录)</li><li>daocloud  </li><li>时速云  </li><li>网易</li></ul><h3 id="Docker官方仓库"><a href="#Docker官方仓库" class="headerlink" title="Docker官方仓库"></a>Docker官方仓库</h3><p><a href="https://hub.docker.com/" target="_blank" rel="noopener">docker hub</a></p><h2 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h2><h3 id="Docker包括三个基本概念"><a href="#Docker包括三个基本概念" class="headerlink" title="Docker包括三个基本概念"></a>Docker包括三个基本概念</h3><ul><li>镜像(Image)</li><li>容器(Container)</li><li>仓库(Repository)</li></ul><p><code>镜像</code>是静态的、只读的文件，类似于面向对象编程中的类，docker镜像使用了<code>分层存储</code>的架构，构建时，前一层是后一层的基础，而后一层的所有改变只在该层发生作用，好处是可以对镜像进行更好的定制及复用，如使用<a href="https://hub.docker.com/" target="_blank" rel="noopener">dockerHub</a>上下载构建好的镜像，然后根据自己的需求在该镜像基础上添加新的层，就可以定制自己的镜像。</p><p><code>容器</code>是镜像运行时的实体，类似于面向对象编程中的对象，容器可以被创建、启动、停止、删除等。容器的实质是进程，而且容器有隔离的特性，容器之间是相互独立的，有属于自己的命名空间、自己的网络配置等。当每一个容器运行时，是以镜像为基础层在其上创建一层当前容器的存储层，这一层称为<code>容器存储层</code>，运行时他是<code>可读写</code>的。但是当销毁一个容器时，这一层的信息也会随着被销毁，所以容器存储层要保持无状态化，对该层的文件写入操作应该使用<code>数据卷</code>或者绑定宿主机目录，直接对宿主机(或网络存储)发生读写，其性能和稳定性更高。</p><p><code>仓库</code>则是管理镜像的地方，可以将镜像提交到仓库，让其它用户也可以使用你的镜像，类似于管理镜像的<a href="https://github.com/" target="_blank" rel="noopener">github</a>，docker的官方仓库是<a href="https://hub.docker.com/" target="_blank" rel="noopener">dockerHub</a>。</p><p>理解了这三个概念，就理解了Docker的整个生命周期。</p><h2 id="Docker各种平台下的安装"><a href="#Docker各种平台下的安装" class="headerlink" title="Docker各种平台下的安装"></a>Docker各种平台下的安装</h2><h3 id="1-unix-amp-linux下安装"><a href="#1-unix-amp-linux下安装" class="headerlink" title="1.unix &amp; linux下安装"></a>1.unix &amp; linux下安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Centos、Redhat</span></span><br><span class="line">yum install -y docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu、Debain</span></span><br><span class="line">apt-get install -y docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动|关闭|重启  </span></span><br><span class="line">systemctl start|stop|restart docker  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机自启  </span></span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></tbody></table></figure><h3 id="2-mac-系统安装"><a href="#2-mac-系统安装" class="headerlink" title="2.mac 系统安装"></a>2.mac 系统安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install docker</span><br></pre></td></tr></tbody></table></figure><p>安装完成查看信息</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看docker信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker info</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看docker版本  </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker version  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker一般存储位置  /var/lib/docker/devicemapper/devicemapper/data</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Docker基本操作"><a href="#Docker基本操作" class="headerlink" title="Docker基本操作"></a>Docker基本操作</h2><h3 id="镜像基本操作"><a href="#镜像基本操作" class="headerlink" title="镜像基本操作"></a>镜像基本操作</h3><h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找镜像</span></span><br><span class="line">docker search centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从Docker仓库中获取镜像，不加标签默认latest</span></span><br><span class="line">docker pull centos:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出已经下载好的镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY          TAG                  IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/nginx     latest               ed21b7a8aee9        12 days ago         127 MB</span><br><span class="line">docker.io/php       7.2-fpm-alpine3.11   d9d4aaebe714        2 weeks ago         74.2 MB</span><br><span class="line">docker.io/ubuntu    18.04                4e5021d210f6        3 weeks ago         64.2 MB</span><br><span class="line">docker.io/centos    latest               470671670cac        2 months ago        237 MB</span><br></pre></td></tr></tbody></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除镜像（可使用名称或镜像ID删除），只能删除没有容器运行的镜像，（增加-f为强制删除）</span></span><br><span class="line">docker rmi docker.io/centos</span><br><span class="line">docker rmi -f docker.io/centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有镜像ID</span></span><br><span class="line">docker images -q</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 批量删除所有镜像</span></span><br><span class="line">docker rmi (docker images -q)</span><br></pre></td></tr></tbody></table></figure><h4 id="过滤查询部分镜像"><a href="#过滤查询部分镜像" class="headerlink" title="过滤查询部分镜像"></a>过滤查询部分镜像</h4><p><code>docker images</code>会列出所有的顶层镜像，我们可以使用过滤器参数 <code>--filter</code>，或者简写 <code>-f</code>，用来查出部分镜像。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查出某个指定的镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images nginx</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/nginx     latest              ed21b7a8aee9        12 days ago         127 MB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查出本地仓库在ubuntu:18.04之后构建的镜像，使用since表示之后，之前可以使用before表示</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images -f since=ubuntu:18.04</span></span><br><span class="line">REPOSITORY          TAG                  IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/nginx     latest               ed21b7a8aee9        12 days ago         127 MB</span><br><span class="line">docker.io/php       7.2-fpm-alpine3.11   d9d4aaebe714        2 weeks ago         74.2 MB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义格式显示，使用--format参数，比如我们只想看镜像的ID、仓库名称及标签信息，需要使用GO的模板语法</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images --format <span class="string">"{{.ID}} : {{.Repository}} : {{.Tag}}"</span></span></span><br><span class="line">ed21b7a8aee9 : docker.io/nginx : latest</span><br><span class="line">d9d4aaebe714 : docker.io/php : 7.2-fpm-alpine3.11</span><br><span class="line">4e5021d210f6 : docker.io/ubuntu : 18.04</span><br></pre></td></tr></tbody></table></figure><h4 id="保存及导入镜像"><a href="#保存及导入镜像" class="headerlink" title="保存及导入镜像"></a>保存及导入镜像</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将镜像保存成 tar 归档文件。</span></span><br><span class="line">docker save -o testNginx.tar nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将归档文件导入为镜像</span></span><br><span class="line">docker load -i testNginx.tar</span><br></pre></td></tr></tbody></table></figure><h3 id="容器基本操作"><a href="#容器基本操作" class="headerlink" title="容器基本操作"></a>容器基本操作</h3><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><ul><li><code>docker run</code> 创建并运行一个容器的主要命令</li><li><code>-i</code> 进行交互模式</li><li><code>-t</code> 分配一个伪终端(tty)</li><li><code>-d</code> 容器以守护进程运行</li><li><code>--name</code> 为容器命名</li><li><code>/bin/bash</code> 使用shell</li><li><code>-p</code> : 是容器内部端口绑定到指定的主机端口。</li><li><code>-P</code> :是容器内部端口映射到主机的<code>随机</code>端口。  </li></ul><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建并运行一个nginx容器，将容器内80端口映射到宿主机8080端口，容器命名为myNginx，并启动一个`/bin/bash`终端进行交互</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -it -p 8080:80 --name myNginx1 nginx:latest /bin/bash</span></span><br><span class="line">root@400f555a8234:/#</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个容器但不运行它</span></span><br><span class="line">docker create --name testNginx nginx:latest</span><br></pre></td></tr></tbody></table></figure><p>当使用<code>docker run</code>创建容器时，后台的标准操作为：</p><ul><li>检查本地是否存在指定镜像，不存在则去公有仓库下载</li><li>使用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像层外面挂载一层可读可写层</li><li>从宿主机主机配置的桥接接口中桥接一个虚拟接口到容器中去</li><li>从地址池配置一个ip地址给容器</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ul><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看运行中的容器，查看所有容器使用 -a 参数</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">d66658ac8a18        nginx               "/bin/bash"         About an hour ago   Up 49 minutes       80/tcp              myNginx</span><br></pre></td></tr></tbody></table></figure><h4 id="操作容器状态"><a href="#操作容器状态" class="headerlink" title="操作容器状态"></a>操作容器状态</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 停止一个容器，myNginx为容器名称，也可使用容器ID</span></span><br><span class="line">docker stop myNginx</span><br><span class="line">docker kill myNginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动一个停止的容器</span></span><br><span class="line">docker start myNginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启一个容器</span></span><br><span class="line">docker restart myNginx</span><br></pre></td></tr></tbody></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除一个停止的容器,加 -f 表示强制删除，可以删除正在运行的容器</span></span><br><span class="line">docker rm myNginx</span><br></pre></td></tr></tbody></table></figure><h4 id="查看容器信息"><a href="#查看容器信息" class="headerlink" title="查看容器信息"></a>查看容器信息</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看容器中运行的进程信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker top myNginx</span></span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                9227                9208                0                   16:46               ?                   00:00:00            nginx: master process nginx -g daemon off;</span><br><span class="line">101                 9248                9227                0                   16:46               ?                   00:00:00            nginx: worker process</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器端口映射</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker port myNginx</span></span><br><span class="line">80/tcp -&gt; 0.0.0.0:8081</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器或者镜像的详细信息</span></span><br><span class="line">docker inspect myNginx</span><br><span class="line">docker inspect nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出指定容器日志信息</span></span><br><span class="line">docker logs myNginx</span><br></pre></td></tr></tbody></table></figure><h4 id="进入与退出容器"><a href="#进入与退出容器" class="headerlink" title="进入与退出容器"></a>进入与退出容器</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 退出容器回到宿主机（两种方式）</span></span><br><span class="line">exit # 等同于使用快捷键ctrl+d，如容器没有使用守护进程，退出后容器也停止</span><br><span class="line">ctrl+p+q # 退出不停止容器</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器（两种方式）</span></span><br><span class="line">docker attach myNginx</span><br><span class="line">docker exec -it myNginx /bin/bash  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 两者区别</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> attach 直接进入容器启动命令的终端，不会启动新的进程，当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exec</span> 是在容器打开新的终端，并且可以启动新的进程</span></span><br></pre></td></tr></tbody></table></figure><h4 id="导入导出容器快照"><a href="#导入导出容器快照" class="headerlink" title="导入导出容器快照"></a>导入导出容器快照</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 导出容器快照</span></span><br><span class="line">docker export myNginx &gt; myNginx.tar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入容器快照</span></span><br><span class="line">docker import myNginx.tar test_nginx #注意导入后镜像名称必须全部为小写</span><br></pre></td></tr></tbody></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>《Docker入门到实践》</li><li><a href="https://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="noopener">Docker教程</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker基本介绍&quot;&gt;&lt;a href=&quot;#Docker基本介绍&quot; class=&quot;headerlink&quot; title=&quot;Docker基本介绍&quot;&gt;&lt;/a&gt;Docker基本介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker&lt;/a&gt; 是一个开源的应用容器引擎，基于&lt;code&gt;Go&lt;/code&gt; 语言 并遵从Apache2.0协议开源。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://uncleqiu.github.io/uncleqiu/categories/Docker/"/>
    
    
      <category term="docker" scheme="https://uncleqiu.github.io/uncleqiu/tags/docker/"/>
    
      <category term="DevOps" scheme="https://uncleqiu.github.io/uncleqiu/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>PHP environment lnmp source installation</title>
    <link href="https://uncleqiu.github.io/uncleqiu/2019/05/17/PHP-environment-lnmp-source-installation/"/>
    <id>https://uncleqiu.github.io/uncleqiu/2019/05/17/PHP-environment-lnmp-source-installation/</id>
    <published>2019-05-16T16:52:24.000Z</published>
    <updated>2019-05-16T17:11:21.034Z</updated>
    
    <content type="html"><![CDATA[<p>LNMP动态网站部署架构是一套由Linux + Nginx + MySQL + PHP组成的动态网站系统解决方案。<br><a id="more"></a></p><h4 id="Source-Package"><a href="#Source-Package" class="headerlink" title="Source Package"></a>Source Package</h4><ul><li><a href="http://nginx.org/download/nginx-1.14.1.tar.gz" target="_blank" rel="noopener">nginx-1.14.1</a></li><li><a href="ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.41.tar.gz" target="_blank" rel="noopener">pcre-8.41</a></li><li><a href="http://zlib.net/zlib-1.2.11.tar.gz" target="_blank" rel="noopener">zlib-1.2.11</a></li><li><a href="http://cn2.php.net/get/php-7.2.12.tar.gz/from/this/mirror" target="_blank" rel="noopener">php-7.2.12</a></li><li><a href="https://cmake.org/files/v3.13/cmake-3.13.0-rc3.tar.gz" target="_blank" rel="noopener">cmake-3.13.0</a></li><li><a href="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-boost-8.0.13.tar.gz" target="_blank" rel="noopener">mysql-8.0.13</a></li></ul><h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h4><p>Centos7 + nginx1.4 + mysql8 + php7.2</p><h4 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h4><p>准备工作需要安装编译器<strong>gcc、gcc-c++</strong>，还有下载解压<strong>wget、tar</strong>等及其它软件依赖，可使用yum安装。(如未配置yum源，请查看配置安装yum源软件仓库文章)<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install gcc gcc-c++ wget tar</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>mysql5.5后的版本需要使用cmake安装，这里安装一下cmake<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/cmake-3.13.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bootstrap </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gmake &amp;&amp; gmake install</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Download-and-Unpack"><a href="#Download-and-Unpack" class="headerlink" title="Download and Unpack"></a>Download and Unpack</h4><p>接下来需要下载并解压搭建LNMP所需要的源码包，这里统一下载到<b>/usr/local/src</b>目录下，可使用<strong>wget</strong>进行下载,<strong>tar</strong>进行解压。<br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">wget下载源码包</span></span><br><span class="line">wget http://xxx.com/xxx-version.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">tar解压源码包</span></span><br><span class="line">tar xvf xxx-version.tar.gz</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Install-NGINX"><a href="#Install-NGINX" class="headerlink" title="Install NGINX"></a>Install NGINX</h4><p>上面已经完成所有源码包的下载及解压的工作，这里直接进行编译配置工作。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#编译配置,详细参数见官网</span><br><span class="line">$ ./configure --sbin-path=/usr/local/nginx/nginx \</span><br><span class="line">--conf-path=/usr/local/nginx/nginx.conf \</span><br><span class="line">--pid-path=/usr/local/nginx/nginx.pid \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-pcre=../pcre-8.41 \</span><br><span class="line">--with-zlib=../zlib-1.2.11</span><br><span class="line">#生成二进制安装程序</span><br><span class="line">$ make</span><br><span class="line">#安装</span><br><span class="line">$ make install</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Install-PHP"><a href="#Install-PHP" class="headerlink" title="Install PHP"></a>Install PHP</h4><p>配置安装PHP<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#编译配置,详细参数见官网</span><br><span class="line">$ ./configure --prefix=/usr/local/php --with-curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir --with-mysqli --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-jpeg-dir --with-xmlrpc --with-xsl --with-zlib --with-bz2 --with-mhash --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-sysvshm --enable-xml --enable-zip</span><br><span class="line">#注意：编译报错缺少依赖包可用yum进行安装</span><br><span class="line">$ yum -y install bzip2 bzip2-devel curl curl-devel libjpeg-devel libpng-devel freetype-devel libxslt-devel</span><br><span class="line">#生成二进制安装程序及安装</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure><p></p><p>创建配置文件，并将其复制到正确的位置，当前位置：/usr/local/src/php7.2.12<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cp php.ini-development /usr/local/php/etc/php.ini</span><br><span class="line">$ cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</span><br><span class="line">$ cp sapi/fpm/php-fpm /usr/local/bin</span><br></pre></td></tr></tbody></table></figure><p></p><p>需要着重提醒的是，如果文件不存在，则阻止 Nginx 将请求发送到后端的 PHP-FPM 模块， 以避免遭受恶意脚本注入的攻击。<br>将 php.ini 文件中的配置项 cgi.fix_pathinfo 设置为 0 。<br>打开 php.ini:<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/local/php/etc/php.ini</span><br></pre></td></tr></tbody></table></figure><p></p><p>定位到 cgi.fix_pathinfo= 并将其修改为如下所示：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cgi.fix_pathinfo=0</span><br></pre></td></tr></tbody></table></figure><p></p><p>在启动服务之前，需要修改 <strong>php-fpm.conf</strong> 配置文件，确保 php-fpm 模块使用 <strong>www-data</strong> 用户和 <strong>www-data</strong> 用户组的身份运行。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/local/etc/php-fpm.conf</span><br></pre></td></tr></tbody></table></figure><p></p><p>找到以下内容并修改：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; Unix user/group of processes ; Note: The user is mandatory. If the group is not set, the default user</span><br><span class="line">; Note: The user is mandatory. If the group is not set, the default user's group</span><br><span class="line">;       will be used.</span><br><span class="line">user = www-data</span><br><span class="line">group = www-data</span><br></pre></td></tr></tbody></table></figure><p></p><p>然后启动 php-fpm 服务：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/local/bin/php-fpm</span><br></pre></td></tr></tbody></table></figure><p></p><p>配置 Nginx 使其支持 PHP 应用：修改nginx配置文件<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/local/nginx/nginx.conf</span><br></pre></td></tr></tbody></table></figure><p></p><p>修改默认的 location 块，使其支持 .php 文件：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / {</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.php index.html index.htm;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>下一步配置来保证对于 .php 文件的请求将被传送到后端的 PHP-FPM 模块， 取消默认的 PHP 配置块的注释，并修改为下面的内容：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.php$ {</span><br><span class="line">    fastcgi_index   index.php;</span><br><span class="line">    fastcgi_pass    127.0.0.1:9000;</span><br><span class="line">    include         fastcgi_params;</span><br><span class="line">    fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">    fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p><p>重启 Nginx。<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /usr/local/nginx/nginx -s stop</span><br><span class="line">$ sudo /usr/local/nginx/nginx</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Install-MYSQL"><a href="#Install-MYSQL" class="headerlink" title="Install MYSQL"></a>Install MYSQL</h4><p>配置mysql参数项及安装，这里下载的是包含boost的源码包，如不包含需要单独下载<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#删除原有mysql或者mariadb，查看系统原有程序</span><br><span class="line">$ rpm -qa | grep mariadb</span><br><span class="line">$ rpm -qa | grep mysql</span><br><span class="line">#删除原有mysql</span><br><span class="line">$ rpm -e | grep mysql-*</span><br><span class="line">$ rpm -e mariadb-libs-5.5.60-1.el7_5.x86_64</span><br><span class="line">#如果失败则</span><br><span class="line">$ rpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64</span><br><span class="line">#查找有关mysql文件</span><br><span class="line">$ find / -name mysql*</span><br><span class="line">#删除有关文件及配置文件</span><br><span class="line">$ rm -rf /etc/my.cnf</span><br><span class="line">#创建用户及用户组</span><br><span class="line">$ useradd mysql -s /sbin/nologin</span><br><span class="line">$ groupadd mysql</span><br><span class="line">#添加用户mysql到用户组mysql中</span><br><span class="line">$ usermod -a -G mysql mysql</span><br><span class="line">#创建mysql数据库服务程序目录及数据库文件目录</span><br><span class="line">$ mkdir -p /usr/local/mysql/data</span><br><span class="line">#修改所有者、所属组</span><br><span class="line">$ chown -Rf mysql:mysql /usr/local/mysql</span><br><span class="line">#安装缺少依赖</span><br><span class="line">$ yum -y install ncurses-devel</span><br><span class="line">#编译配置,详细参数见官网</span><br><span class="line">$ cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span><br><span class="line">-DMYSQL_DATADIR=/usr/local/mysql/data \</span><br><span class="line">-DSYSCONFDIR=/etc \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DWITH_BOOST=/usr/local/src/mysql-8.0.13/boost \</span><br><span class="line">-DDEFAULT_CHARSET=utf8mb4 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8mb4_0900_ai_ci \</span><br><span class="line">-DENABLED_LOCAL_INFILE=ON \</span><br><span class="line">-DWITH_INNODB_MEMCACHED=ON \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_FEDERATED_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_ARCHIVE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_PERFSCHEMA_STORAGE_ENGINE=1</span><br><span class="line">#生成二进制安装程序及安装，需要长时间等待</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure><p></p><p>使用mysqld手动初始化数据目录,当前位置<b>/usr/local/mysql</b><br></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/mysqld --initialize --user=mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bin/mysqld --initialize-insecure --user=mysql</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>使用 –initialize了“ 默认安全 ”安装（即包括生成随机初始的root密码）。在这种情况下，密码被标记为已过期，您需要选择一个新密码。使用该 –initialize-insecure选项，不会 root生成密码; 假设您在将服务器投入生产使用之前及时为帐户分配密码。</p><p>这可能需要指定其他选项，如 –basedir或 –datadir如果 mysqld的不能识别的安装目录或数据目录中的正确位置。例如（在一行中输入命令）<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br></pre></td></tr></tbody></table></figure><p></p><p>如果您希望服务器能够部署并自动支持安全连接，请使用 mysql_ssl_rsa_setup实用程序创建默认的SSL和RSA文件：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/mysql_ssl_rsa_setup</span><br></pre></td></tr></tbody></table></figure><p></p><p>启动服务器:<br>如果您的安装包含mysqld_safe，请启动MySQL服务器<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/mysqld_safe --user=mysql &amp;</span><br></pre></td></tr></tbody></table></figure><p></p><p>修改账号密码<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter user 'root'@'localhost' identified by "123456";</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>至此LNMP已经搭建完毕</strong></p><h4 id="centos7配置服务开机自启动"><a href="#centos7配置服务开机自启动" class="headerlink" title="centos7配置服务开机自启动"></a>centos7配置服务开机自启动</h4><h5 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h5><p>在系统服务目录里创建nginx.service文件<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /lib/systemd/system/nginx.service</span><br></pre></td></tr></tbody></table></figure><p></p><p>修改内容如下：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line">  </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/nginx -s quit</span><br><span class="line">PrivateTmp=true</span><br><span class="line">  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>设置开机启动</strong><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl enable nginx.service</span><br></pre></td></tr></tbody></table></figure><p></p><h5 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h5><p>在系统服务目录里创建nginx.service文件<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /lib/systemd/system/mysqld.service</span><br></pre></td></tr></tbody></table></figure><p></p><p>修改内容如下：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=mysql</span><br><span class="line">After=network.target</span><br><span class="line">After=syslog.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">#Type=forking</span><br><span class="line">ExecStart=/usr/local/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line">ExecStop=/usr/local/mysql/bin/mysqladmin shutdown</span><br><span class="line">#PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure><p></p><p><strong>解释：</strong><br>[Unit]:服务的说明<br>Description:描述服务<br>After:描述服务类别<br>[Service]服务运行参数的设置<br>Type=forking是后台运行的形式<br>ExecStart为服务的具体运行命令<br>ExecReload为重启命令<br>ExecStop为停止命令<br>PrivateTmp=True表示给服务分配独立的临时空间<br>注意：[Service]的启动、重启、停止命令全部要求使用绝对路径<br>[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</p><p><strong>其他命令：</strong><br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#启动nginx服务</span><br><span class="line">$ systemctl start nginx.service</span><br><span class="line">#设置开机自启动</span><br><span class="line">$ systemctl enable nginx.service</span><br><span class="line">#停止开机自启动</span><br><span class="line">$ systemctl disable nginx.service</span><br><span class="line">#查看服务当前状态</span><br><span class="line">$ systemctl status nginx.service</span><br><span class="line">#重新启动服务</span><br><span class="line">$ systemctl restart nginx.service</span><br><span class="line">#查看所有已启动的服务</span><br><span class="line">$ systemctl list-units --type=service</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://www.php.net" target="_blank" rel="noopener">PHP官网</a></li><li><a href="https://nginx.org" target="_blank" rel="noopener">Nginx官网</a></li><li><a href="https://www.mysql.com" target="_blank" rel="noopener">Mysql官网</a></li><li><a href="https://www.cnblogs.com/piscesLoveCc/p/5867900.html" target="_blank" rel="noopener">centos7配置服务开机自启动</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LNMP动态网站部署架构是一套由Linux + Nginx + MySQL + PHP组成的动态网站系统解决方案。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://uncleqiu.github.io/uncleqiu/categories/PHP/"/>
    
      <category term="LNMP" scheme="https://uncleqiu.github.io/uncleqiu/categories/LNMP/"/>
    
    
      <category term="PHP" scheme="https://uncleqiu.github.io/uncleqiu/tags/PHP/"/>
    
      <category term="environment" scheme="https://uncleqiu.github.io/uncleqiu/tags/environment/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s start learning python</title>
    <link href="https://uncleqiu.github.io/uncleqiu/2019/03/10/Let-s-start-learning-python/"/>
    <id>https://uncleqiu.github.io/uncleqiu/2019/03/10/Let-s-start-learning-python/</id>
    <published>2019-03-10T06:22:43.000Z</published>
    <updated>2019-03-10T07:18:15.823Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.python.org/" target="_blank" rel="noopener">Python</a>是一种易于学习，功能强大的编程语言。<a id="more"></a>它具有高效的高级数据结构和面向对象编程的简单而有效的方法。Python优雅的语法和动态类型及其解释特性使其成为大多数平台上许多领域的脚本编写和快速应用程序开发的理想语言。  </p><h4 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h4><h5 id="各种平台下的安装"><a href="#各种平台下的安装" class="headerlink" title="各种平台下的安装"></a>各种平台下的安装</h5><h6 id="1-unix-amp-linux下安装"><a href="#1-unix-amp-linux下安装" class="headerlink" title="1.unix &amp; linux下安装"></a>1.unix &amp; linux下安装</h6><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这里安装3.x.x版本的Python</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tgz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf Python-3.7.2.tgz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> Python-3.7.2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br></pre></td></tr></tbody></table></figure><h6 id="2-MAC安装Python"><a href="#2-MAC安装Python" class="headerlink" title="2.MAC安装Python"></a>2.MAC安装Python</h6><p>MAC系统都自带有Python2.7环境，这里还是安装python3.x的版本，可以前往<a href="https://www.python.org/downloads/mac-osx" target="_blank" rel="noopener">官网</a>下载对应的pkg包进行安装，也可以下载源码包进行安装。</p><h6 id="3-Windows安装Python"><a href="#3-Windows安装Python" class="headerlink" title="3.Windows安装Python"></a>3.Windows安装Python</h6><p>前往<a href="https://www.python.org/downloads/windows" target="_blank" rel="noopener">官网</a>找到对应的安装包，一般就下载 executable installer，x86 表示是 32 位机子的，x86-64 表示 64 位机子的。</p><h5 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h5><h6 id="1-unix-Linux"><a href="#1-unix-Linux" class="headerlink" title="1.unix/Linux"></a>1.unix/Linux</h6><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/usr/local/bin/python"</span></span></span><br></pre></td></tr></tbody></table></figure><h6 id="2-windows"><a href="#2-windows" class="headerlink" title="2.windows"></a>2.windows</h6><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># C:\Python 是Python的安装目录</span><br><span class="line"><span class="built_in">path</span>=<span class="variable">%path%</span>;C:\Python</span><br></pre></td></tr></tbody></table></figure><h5 id="测试python是否可用"><a href="#测试python是否可用" class="headerlink" title="测试python是否可用"></a>测试python是否可用</h5><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3</span></span><br><span class="line">Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 26 2018, 20:42:06)</span><br><span class="line">[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h4><h5 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h5><p>Python标识符是用于标识变量，函数，类，模块或其他对象的名称。 标识符以字母A到Z或a到z或下划线<code>_</code>开头，后跟零个或多个字母，下划线和数字（0到9）。<br>以下是Python标识符的约定</p><ul><li>类名以大写字母开头。所有其他标识符以小写字母开头。</li><li>用单个前导下划线启动标识符表示标识符是私有的，如<code>_foo</code></li><li>启动带有两个前导下划线的标识符表示强私有标识符。如<code>__foo</code></li><li>如果标识符也以两个尾部下划线结尾，则标识符是语言定义的特殊名称。如<code>__foo__</code></li></ul><h5 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h5><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">keyword.kwlist</span><br></pre></td></tr></tbody></table></figure><p></p><h5 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h5><p>Python没有提供大括号<code>{}</code>来指示类和函数定义或流控制的代码块。代码块由行<b>缩进</b>表示，这是严格执行的。  缩进的空格数是<b>可变的</b>，但是同一个代码块的语句必须包含<b>相同的缩进空格数</b>。如：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"True"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">False</span>:    </span><br><span class="line">    print(<span class="string">"False"</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>Python中单行注释以<code>#</code>开头，如：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个单行注释</span></span><br><span class="line">print(<span class="string">"Python"</span>) <span class="comment">#注释</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>Python中多行注释可以用多个<code>#</code>号，或者使用三个单引号<code>'''</code>，或者三个双引号<code>"""</code>进行块注释，如下：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">先用单引号</span></span><br><span class="line"><span class="string">进行多行注释</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">再用双引号</span></span><br><span class="line"><span class="string">进行多行注释</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(<span class="string">'Hello World!'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><h5 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h5><p>Python语句可以以<code>;</code>作为结束符也可以省略，当在单行使用多个语句时可以用<code>;</code>进行分割。如：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numVal = <span class="number">10</span>;listVal = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></tbody></table></figure><p></p><p>Python中的语句通常以新行结束，也允许使用行反斜杠<code>\</code>来表示该行应该继续。如：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total = <span class="number">1</span> + \</span><br><span class="line">    <span class="number">2</span> + \</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">print(total)</span><br></pre></td></tr></tbody></table></figure><p></p><p>其中语句中包含<code>[]</code>，<code>{}</code>或<code>()</code>时不需要反斜杠<code>\</code>进行连接。如：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total = [<span class="number">1</span>,</span><br><span class="line">     <span class="number">2</span>,</span><br><span class="line">     <span class="number">3</span>,</span><br><span class="line">     <span class="number">4</span>]</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h4><h5 id="1-数字类型"><a href="#1-数字类型" class="headerlink" title="1.数字类型"></a>1.数字类型</h5><p>数字类型包括 <b>int(整型)、float(浮点型)、bool(布尔型)、complex(复数)</b>。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 整型</span></span><br><span class="line">foo = <span class="number">10</span></span><br><span class="line">print(foo, type(foo))</span><br><span class="line"><span class="comment"># 2.浮点型</span></span><br><span class="line">foo = <span class="number">10.10</span></span><br><span class="line">print(foo, type(foo))</span><br><span class="line"><span class="comment"># 3. 复数</span></span><br><span class="line">foo = <span class="number">2</span> + <span class="number">1j</span></span><br><span class="line">print(foo, type(foo))</span><br><span class="line">print(<span class="string">'复数的实部:'</span>+str(foo.real),<span class="string">'复数的虚部:'</span>+str(foo.imag))</span><br><span class="line">print(<span class="string">'复数的实部:%s 复数的虚部:%s'</span> %(foo.real, foo.imag))</span><br><span class="line"><span class="comment"># 使用多个变量赋值</span></span><br><span class="line">a, b, c = <span class="number">10</span>, <span class="number">10.10</span>, <span class="number">2</span> + <span class="number">1j</span></span><br><span class="line">print(type(a), type(b), type(c))</span><br></pre></td></tr></tbody></table></figure><p></p><h5 id="2-字符串类型"><a href="#2-字符串类型" class="headerlink" title="2.字符串类型"></a>2.字符串类型</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string">1. 反斜杠可以用来转义，字符串前加r可以让反斜杠不发生转义。</span></span><br><span class="line"><span class="string">2. 字符串可以用+连接，用*重复</span></span><br><span class="line"><span class="string">3. 字符串索引从左往右从0开始，从右往左从-1开始</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 声明空字符串</span></span><br><span class="line">foo = <span class="string">''</span></span><br><span class="line">foo1 = str();</span><br><span class="line">print(foo, type(foo), foo1, type(foo1))</span><br><span class="line"><span class="comment"># 声明一个字符串</span></span><br><span class="line">foo = <span class="string">'Hello Python3'</span></span><br><span class="line">print(foo, type(foo))</span><br><span class="line"><span class="comment"># 字符串下标取从左到右是0开始，从右到左是-1开始</span></span><br><span class="line">print(foo[<span class="number">0</span>], foo[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 字符串下标从哪到哪以:分割</span></span><br><span class="line">print(foo[<span class="number">0</span>:<span class="number">1</span>], foo[<span class="number">1</span>:<span class="number">3</span>], foo[<span class="number">2</span>:<span class="number">-1</span>])</span><br><span class="line"><span class="comment"># 字符串从下标至结束</span></span><br><span class="line">print(foo[<span class="number">0</span>:], foo[<span class="number">2</span>:])</span><br><span class="line"><span class="comment"># 输出字符串两次</span></span><br><span class="line">print(foo * <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 使用\转义</span></span><br><span class="line">print(<span class="string">'Hello \n Python3'</span>) <span class="comment"># \n会换行</span></span><br><span class="line">print(<span class="string">'Hello \\n Python3'</span>) <span class="comment"># 使用\转义 让\n原样输出</span></span><br><span class="line">print(<span class="string">r'Hello \n Python3'</span>) <span class="comment"># 字符串前加r，使其原样输出</span></span><br><span class="line"><span class="comment"># 使用+进行拼接</span></span><br><span class="line">foo = <span class="string">'Hello'</span></span><br><span class="line">print(foo + <span class="string">' Python3'</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="3-布尔类型"><a href="#3-布尔类型" class="headerlink" title="3.布尔类型"></a>3.布尔类型</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">trueFoo = <span class="keyword">True</span></span><br><span class="line">falseFoo = <span class="keyword">False</span></span><br><span class="line">print(trueFoo, type(trueFoo))</span><br><span class="line">print(falseFoo, type(falseFoo))</span><br></pre></td></tr></tbody></table></figure><h5 id="4-列表"><a href="#4-列表" class="headerlink" title="4.列表"></a>4.列表</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string">1. list可以被索引和切片</span></span><br><span class="line"><span class="string">2. list可以使用+进行拼接</span></span><br><span class="line"><span class="string">3. list中的元素是可变的</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 声明空列表</span></span><br><span class="line">foo = []</span><br><span class="line">foo1 = list()</span><br><span class="line">print(foo, type(foo), foo1, type(foo1))</span><br><span class="line"><span class="comment"># 声明一个列表</span></span><br><span class="line">foo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(foo, type(foo))</span><br><span class="line"><span class="comment"># 下标索引从左到右从0开始，从右到左则-1开始</span></span><br><span class="line">print(foo[<span class="number">1</span>], foo[<span class="number">3</span>], foo[<span class="number">-1</span>], foo[<span class="number">0</span>:<span class="number">2</span>], foo[<span class="number">2</span>:])</span><br><span class="line"><span class="comment"># 列表截取支持可以接收三个参数，第三个参数代表截取的步长</span></span><br><span class="line">print(foo[<span class="number">0</span>:<span class="number">5</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 列表是可变的</span></span><br><span class="line">foo[<span class="number">0</span>] = <span class="number">99</span></span><br><span class="line">foo[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">22</span>, <span class="number">33</span>] </span><br><span class="line">print(foo)</span><br><span class="line"><span class="comment"># 输出两次列表</span></span><br><span class="line">print(foo * <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 连接列表</span></span><br><span class="line">foo1 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">print(foo + foo1)</span><br></pre></td></tr></tbody></table></figure><h5 id="5-元组"><a href="#5-元组" class="headerlink" title="5.元组"></a>5.元组</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string">1. 元组也可以被索引和切片</span></span><br><span class="line"><span class="string">2. 元组也可以使用+进行拼接</span></span><br><span class="line"><span class="string">3. 元组中的元素是不可修改的</span></span><br><span class="line"><span class="string">4. 注意构造包含 0 或 1 个元素的元组的特殊语法规则</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">foo = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">print(foo, type(foo))</span><br><span class="line"><span class="comment"># 下标索引从左到右从0开始，从右到左则-1开始</span></span><br><span class="line">print(foo[<span class="number">1</span>], foo[<span class="number">3</span>], foo[<span class="number">-1</span>], foo[<span class="number">0</span>:<span class="number">2</span>], foo[<span class="number">2</span>:])</span><br><span class="line"><span class="comment"># 元组元素是不可变的，如果元素是列表可变</span></span><br><span class="line">foo = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment"># foo[0] = 10 这里会报错</span></span><br><span class="line">foo[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">20</span></span><br><span class="line">print(foo)</span><br><span class="line"><span class="comment"># 构造一个空元组</span></span><br><span class="line">foo = ()</span><br><span class="line">foo1 = tuple()</span><br><span class="line">print(foo, type(foo), foo1, type(foo1))</span><br><span class="line"><span class="comment"># 构造一个元素的元组</span></span><br><span class="line">foo = (<span class="number">1</span>) <span class="comment"># 这种方法构造出来的类型不是元组,需使用以下方法：</span></span><br><span class="line">foo1 = (<span class="number">1</span>,)</span><br><span class="line">foo2 = <span class="number">1</span>,</span><br><span class="line">print(foo, type(foo), foo1, type(foo1), foo2, type(foo2))</span><br></pre></td></tr></tbody></table></figure><h5 id="6-集合"><a href="#6-集合" class="headerlink" title="6.集合"></a>6.集合</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string">1.可以使用{}或者set()函数创建集合，但是创建空集合必须用set()，因为{}是用来创建一个空字典的</span></span><br><span class="line"><span class="string">2.集合是无序、不可修改的</span></span><br><span class="line"><span class="string">3.集合会自动去重</span></span><br><span class="line"><span class="string">4.set()至多只能传一个参数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 声明空集合</span></span><br><span class="line">foo = set()</span><br><span class="line">print(foo, type(foo))</span><br><span class="line"><span class="comment"># 声明一个集合</span></span><br><span class="line">foo = set(<span class="string">'123hello'</span>)</span><br><span class="line">foo1 = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>}</span><br><span class="line">print(foo, type(foo), foo1, type(foo1))</span><br><span class="line"><span class="comment"># 测试元素是否在集合中</span></span><br><span class="line">print(<span class="string">'o'</span> <span class="keyword">in</span> foo, <span class="number">10</span> <span class="keyword">in</span> foo1)</span><br><span class="line"><span class="comment"># 声明两个集合</span></span><br><span class="line">foo = {<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">20</span>, <span class="number">53</span>}</span><br><span class="line">foo1 = {<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">20</span>, <span class="number">5</span>}</span><br><span class="line"><span class="comment"># 计算差集</span></span><br><span class="line">diff = foo - foo1</span><br><span class="line">diff2 = foo1 - foo</span><br><span class="line">print(diff, type(diff), diff2, type(diff2))</span><br><span class="line"><span class="comment"># 计算并集</span></span><br><span class="line">diff = foo | foo1</span><br><span class="line">print(diff, type(diff))</span><br><span class="line"><span class="comment"># 计算交集</span></span><br><span class="line">diff = foo &amp; foo1</span><br><span class="line">print(diff, type(diff))</span><br><span class="line"><span class="comment"># 对称差集  两个集合不同时存在的元素</span></span><br><span class="line">diff = foo ^ foo1</span><br><span class="line">print(diff, type(diff))</span><br></pre></td></tr></tbody></table></figure><h5 id="7-字典"><a href="#7-字典" class="headerlink" title="7.字典"></a>7.字典</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string">1.可以使用{}或者dict()创建字典</span></span><br><span class="line"><span class="string">2.字典是一种映射类型，它的元素是键值对</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 声明空字典</span></span><br><span class="line">foo = {}</span><br><span class="line">print(foo, type(foo))</span><br><span class="line"><span class="comment"># 声明一个字典</span></span><br><span class="line">foo = {<span class="string">'name'</span>:<span class="string">'jacky'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>,<span class="string">'sex'</span>:<span class="string">'man'</span>}</span><br><span class="line">print(foo,type(foo))</span><br><span class="line">foo = dict([(<span class="string">'name'</span>,<span class="string">'jacky'</span>),(<span class="string">'age'</span>,<span class="number">20</span>),(<span class="string">'sex'</span>,<span class="string">'man'</span>)])</span><br><span class="line">print(foo, type(foo))</span><br><span class="line">foo = dict(name=<span class="string">'jacky'</span>,age=<span class="number">30</span>,sex=<span class="string">'man'</span>)</span><br><span class="line">print(foo, type(foo))</span><br><span class="line">foo = {x : x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)}</span><br><span class="line">print(foo, type(foo))</span><br><span class="line"><span class="comment"># 获取字典的值</span></span><br><span class="line">foo = {<span class="string">'name'</span>:<span class="string">'jacky'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>,<span class="string">'sex'</span>:<span class="string">'man'</span>}</span><br><span class="line">print(foo[<span class="string">'name'</span>], foo[<span class="string">'age'</span>], foo[<span class="string">'sex'</span>])</span><br><span class="line"><span class="comment"># 获取字典所有的键</span></span><br><span class="line">fooKey = foo.keys()</span><br><span class="line">print(fooKey, type(fooKey))</span><br><span class="line"><span class="comment">#获取字典所有的值</span></span><br><span class="line">fooVal = foo.values()</span><br><span class="line">print(fooVal, type(fooVal))</span><br><span class="line"><span class="comment"># 清空字典</span></span><br><span class="line">print(foo.clear(), foo, type(foo))</span><br></pre></td></tr></tbody></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.python.org" target="_blank" rel="noopener">python org</a></li><li><a href="https://www.tutorialspoint.com/python" target="_blank" rel="noopener">python tutorialspoint</a></li><li><a href="https://www.liaoxuefeng.com" target="_blank" rel="noopener">廖雪峰博客</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.python.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python&lt;/a&gt;是一种易于学习，功能强大的编程语言。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://uncleqiu.github.io/uncleqiu/categories/Python/"/>
    
    
      <category term="Python" scheme="https://uncleqiu.github.io/uncleqiu/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令整理</title>
    <link href="https://uncleqiu.github.io/uncleqiu/2019/02/06/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>https://uncleqiu.github.io/uncleqiu/2019/02/06/Git常用命令整理/</id>
    <published>2019-02-06T12:46:25.000Z</published>
    <updated>2019-02-06T12:53:16.473Z</updated>
    
    <content type="html"><![CDATA[<p>Git常用命令整理(未完待补充)。<a id="more"></a></p><h3 id="Git常用名词"><a href="#Git常用名词" class="headerlink" title="Git常用名词"></a>Git常用名词</h3><ul><li>Workspace: <b>工作区</b></li><li>Index/Stage: <b>暂存区</b></li><li>Repository: <b>仓库区(本地仓库)</b></li><li>Remote: <b>远程仓库</b></li><li>Master: <b>主分支</b></li><li>Origin: <b>默认远程分支</b></li></ul><h3 id="Git基本命令"><a href="#Git基本命令" class="headerlink" title="Git基本命令"></a>Git基本命令</h3><h4 id="一、新建-初始化-仓库"><a href="#一、新建-初始化-仓库" class="headerlink" title="一、新建(初始化)仓库"></a>一、新建(初始化)仓库</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 已有项目代码，前往项目目录创建代码库</span></span><br><span class="line">$ <span class="built_in">cd</span> your_project</span><br><span class="line">$ git init</span><br><span class="line"><span class="comment"># 没有项目代码</span></span><br><span class="line">$ git init your_project</span><br><span class="line">$ <span class="built_in">cd</span> your_project</span><br><span class="line"><span class="comment"># 提示：其实两种差别不大，一般使用第一种，可以先创建项目目录，再进去项目目录创建版本库</span></span><br><span class="line"><span class="comment"># 克隆一个仓库(会包括该仓库所有历史)</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></tbody></table></figure><h4 id="二、配置Git信息"><a href="#二、配置Git信息" class="headerlink" title="二、配置Git信息"></a>二、配置Git信息</h4><p>使用git config命令进行配置，Git的配置文件可以在用户主目录下(全局配置)，也可以在项目目录下(项目配置/本地配置)</p><h5 id="1-配置Git"><a href="#1-配置Git" class="headerlink" title="1.配置Git"></a>1.配置Git</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--<span class="built_in">local</span> | --global | --system]</span><br><span class="line"><span class="comment"># 配置Git最基本的用户信息</span></span><br><span class="line">$ git config [--<span class="built_in">local</span> | --global | --system] user.name <span class="string">'your name'</span></span><br><span class="line">$ git config [--<span class="built_in">local</span> | --global | --system] user.email <span class="string">'your email'</span></span><br><span class="line"><span class="comment"># 最后，查看一下当前Git的配置信息</span></span><br><span class="line">$ git config --list [--<span class="built_in">local</span> | --global | --system]</span><br></pre></td></tr></tbody></table></figure><h5 id="2-git-config的作用域"><a href="#2-git-config的作用域" class="headerlink" title="2.git config的作用域"></a>2.git config的作用域</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只对当前仓库有效</span></span><br><span class="line">$ git config --<span class="built_in">local</span></span><br><span class="line"><span class="comment">#当前用户所有仓库有效</span></span><br><span class="line">$ git config --global</span><br><span class="line"><span class="comment">#系统所有用户有效</span></span><br><span class="line">$ git config --system</span><br></pre></td></tr></tbody></table></figure><h5 id="3-git-config优先级"><a href="#3-git-config优先级" class="headerlink" title="3.git config优先级"></a>3.git config优先级</h5><p><b>local &gt; global &gt; system</b></p><h4 id="三、文件操作"><a href="#三、文件操作" class="headerlink" title="三、文件操作"></a>三、文件操作</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文件添加到暂存区 git add 的相关命令</span></span><br><span class="line"><span class="comment"># 添加指定文件到暂存区(Index/Stage)</span></span><br><span class="line">$ git add [file1] [file2] [file3] ....</span><br><span class="line"><span class="comment"># 添加已经被Git跟踪的文件到暂存区(新的文件不会被添加到暂存区)</span></span><br><span class="line">$ git add -u &lt;==&gt; git add --update</span><br><span class="line"><span class="comment"># 添加目录到暂存区,会包含子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"><span class="comment"># 添加当前目录下所有文件至暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"><span class="comment"># 添加工作区所有文件至暂存区</span></span><br><span class="line">$ git add -A &lt;==&gt; git add --add</span><br><span class="line"><span class="comment"># 对一个文件进行了多处个性，并想分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"><span class="comment"># 对已被Git管理的文件重命名</span></span><br><span class="line">$ git mv [file<span class="_">-a</span>] [file-b]</span><br><span class="line"><span class="comment"># 停止追踪该文件，该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"><span class="comment"># 删除工作区文件，并将删除操作放至暂存区</span></span><br><span class="line">$ git rm [file1] [file2]</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># 查看变更区别</span></span><br><span class="line">$ git diff</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git常用命令整理(未完待补充)。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://uncleqiu.github.io/uncleqiu/categories/Git/"/>
    
    
      <category term="版本控制" scheme="https://uncleqiu.github.io/uncleqiu/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="Git" scheme="https://uncleqiu.github.io/uncleqiu/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git Start</title>
    <link href="https://uncleqiu.github.io/uncleqiu/2018/12/23/Git-Start/"/>
    <id>https://uncleqiu.github.io/uncleqiu/2018/12/23/Git-Start/</id>
    <published>2018-12-23T06:28:48.000Z</published>
    <updated>2018-12-23T07:09:49.510Z</updated>
    
    <content type="html"><![CDATA[<p>Git是一个开源的分布式版本控制系统。<a id="more"></a>用于敏捷高效地处理任何或小或大的项目，除了Git还有CVS,SVN等版本管理系统。</p><h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><p>想学习或者使用git，第一步需要安装它。<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Mac环境下：使用homebrew安装git</span></span><br><span class="line">$ brew install git</span><br><span class="line"><span class="comment">#Linux(centos、red hat)：</span></span><br><span class="line">$ yum install git</span><br><span class="line"><span class="comment">#Linux(ubuntu、debian)</span></span><br><span class="line">$ apt-get install git</span><br><span class="line"><span class="comment">#查看安装版本</span></span><br><span class="line">$ git --version</span><br></pre></td></tr></tbody></table></figure><p></p><h5 id="简单的配置Git"><a href="#简单的配置Git" class="headerlink" title="简单的配置Git"></a>简单的配置Git</h5><p>开始使用Git，首先需要配置你的用户名和邮箱。<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置用户名</span></span><br><span class="line">$ git config --global user.name <span class="string">'your name'</span></span><br><span class="line"><span class="comment">#配置邮箱</span></span><br><span class="line">$ git config --global user.email <span class="string">'example@domain.com'</span></span><br><span class="line"><span class="comment">#查看git的配置信息</span></span><br><span class="line">$ git config --list</span><br></pre></td></tr></tbody></table></figure><p></p><p>清除git config配置<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --<span class="built_in">unset</span> --global user.name</span><br><span class="line">$ git config --<span class="built_in">unset</span> --global user.email</span><br></pre></td></tr></tbody></table></figure><p></p><p>git config的作用域<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只对当前仓库有效</span></span><br><span class="line">$ git config --<span class="built_in">local</span></span><br><span class="line"><span class="comment">#当前用户所有仓库有效</span></span><br><span class="line">$ git config --global</span><br><span class="line"><span class="comment">#系统所有用户有效</span></span><br><span class="line">$ git config --system</span><br></pre></td></tr></tbody></table></figure><p></p><p>git config优先级:<b>local &gt; global &gt; system</b></p><h5 id="初始化-创建-git仓库"><a href="#初始化-创建-git仓库" class="headerlink" title="初始化(创建)git仓库"></a>初始化(创建)git仓库</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入项目目录</span></span><br><span class="line">$ <span class="built_in">cd</span> your_project</span><br><span class="line"><span class="comment">#仓库初始化</span></span><br><span class="line">$ git init</span><br></pre></td></tr></tbody></table></figure><p>创建完仓库后，项目目录下会有个.git的隐藏文件夹，进去看下吧。<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .git</span><br><span class="line"><span class="comment">#查看config文件，你会发现你配置的user信息</span></span><br><span class="line">$ cat config</span><br><span class="line"><span class="comment">#查看HEAD文件，指向ref的分支</span></span><br><span class="line">$ cat HEAD</span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></tbody></table></figure><p></p><h5 id="使用Git进行提交工作"><a href="#使用Git进行提交工作" class="headerlink" title="使用Git进行提交工作"></a>使用Git进行提交工作</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在工作区新增编辑一个文件</span></span><br><span class="line">$ vim test_file</span><br><span class="line"><span class="comment">#查看git当前状态，有一个文件未添加到暂存区</span></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">test_file</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br><span class="line"><span class="comment">#将test_file加入暂存区</span></span><br><span class="line">$ git add test_file</span><br><span class="line"><span class="comment">#将test_file提交到版本库,-m是提交描述</span></span><br><span class="line">$ git commit -m <span class="string">'add test file'</span></span><br><span class="line"><span class="comment">#再次查看状态会发现工作区是干净的状态</span></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"><span class="comment">#查看日志</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></tbody></table></figure><p>这就是git一个简单的提交工作流程。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git是一个开源的分布式版本控制系统。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://uncleqiu.github.io/uncleqiu/categories/Git/"/>
    
    
      <category term="版本控制" scheme="https://uncleqiu.github.io/uncleqiu/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="Git" scheme="https://uncleqiu.github.io/uncleqiu/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Redis命令</title>
    <link href="https://uncleqiu.github.io/uncleqiu/2018/12/18/Redis%E5%91%BD%E4%BB%A4/"/>
    <id>https://uncleqiu.github.io/uncleqiu/2018/12/18/Redis命令/</id>
    <published>2018-12-18T14:24:33.000Z</published>
    <updated>2018-12-23T04:36:41.861Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章来了解下Redis的几个通用命令吧。<br><a id="more"></a></p><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a><center>通用命令</center></h3><h4 id="1-keys"><a href="#1-keys" class="headerlink" title="1.keys"></a>1.keys</h4><p>时间复杂度：O(n)， n 为数据库中 key 的数量。<br>返回值：符合给定模式的 key 列表。<br>一般在生产环境中不建议使用(生产环境key数量比较多容易造成阻塞)<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">keys [pattern]   <span class="comment">#查找所有符合给定模式 pattern 的 key 。</span></span><br><span class="line">keys *           <span class="comment">#匹配数据库中所有 key 。</span></span><br><span class="line">keys h?llo  <span class="comment">#匹配 hello ， hallo 和 hxllo 等。</span></span><br><span class="line">keys h*llo  <span class="comment">#匹配 hllo 和 heeeeello 等。</span></span><br><span class="line">keys h[ae]llo    <span class="comment">#匹配 hello 和 hallo ，但不匹配 hillo 。</span></span><br><span class="line">keys he[h<span class="_">-l</span>]*    <span class="comment">#匹配h-l范围内的字母，如匹配hello，不匹配hero</span></span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="2-dbsize"><a href="#2-dbsize" class="headerlink" title="2.dbsize"></a>2.dbsize</h4><p>返回当前数据库的 key 的数量。<br>时间复杂度：O(1)<br>返回值：当前数据库的 key 的数量。<br>生产环境可使用<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="3-exists"><a href="#3-exists" class="headerlink" title="3.exists"></a>3.exists</h4><p>exists key 检查给定 key 是否存在。<br>时间复杂度：O(1)<br>返回值：若 key 存在，返回 1 ，否则返回 0 。<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exists hello</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="4-del"><a href="#4-del" class="headerlink" title="4.del"></a>4.del</h4><p>del key [key …]<br>删除给定的一个或多个 key ，不存在的 key 会被忽略。<br>时间复杂度：O(n)， n 为被删除的 key 的数量。<br>删除单个字符串类型的 key ，时间复杂度为O(1)。<br>删除单个列表、集合、有序集合或哈希表类型的 key ，时间复杂度为O(M)， M 为以上数据结构内的元素数量。<br>返回值：被删除 key 的数量。</p><h4 id="5-expire"><a href="#5-expire" class="headerlink" title="5.expire"></a>5.expire</h4><p>expire key seconds<br>设置 key 在seconds秒后过期<br>时间复杂度：O(1)<br>返回值：设置成功返回 1 ，当 key 不存在或者不能为 key 设置生存时间时，返回 0 。<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置 age 20秒后过期</span></span><br><span class="line">127.0.0.1:6379&gt; expire age 20 </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#查看 age 剩余生存时间</span></span><br><span class="line">127.0.0.1:6379&gt; ttl age </span><br><span class="line">(<span class="built_in">integer</span>) 18</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="6-ttl"><a href="#6-ttl" class="headerlink" title="6.ttl"></a>6.ttl</h4><p>ttl key<br>以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。<br>时间复杂度：O(1)<br>返回值：<br>当 key 不存在时，返回 -2 。<br>当 key 存在但没有设置剩余生存时间时，返回 -1 。<br>否则，以秒为单位，返回 key 的剩余生存时间。<br>注意：在 Redis 2.8 以前，当 key 不存在，或者 key 没有设置剩余生存时间时，命令都返回 -1 。</p><h4 id="7-persist"><a href="#7-persist" class="headerlink" title="7.persist"></a>7.persist</h4><p>persist key<br>去除 key 的过期时间，使其变成一个不带生存时间、永不过期 key 。<br>时间复杂度：O(1)<br>返回值：<br>当生存时间移除成功时，返回 1 .<br>如果 key 不存在或 key 没有设置生存时间，返回 0<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置 age 30秒后过期</span></span><br><span class="line">127.0.0.1:6379&gt; expire age 30 </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#查看 age 生存时间（此显示还有28秒）</span></span><br><span class="line">127.0.0.1:6379&gt; ttl age </span><br><span class="line">(<span class="built_in">integer</span>) 28</span><br><span class="line"><span class="comment">#去除 age 生存时间，使其不过期</span></span><br><span class="line">127.0.0.1:6379&gt; persist age </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#再次查看 age ，此时为不过期</span></span><br><span class="line">127.0.0.1:6379&gt; ttl age </span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="8-type"><a href="#8-type" class="headerlink" title="8.type"></a>8.type</h4><p>type key<br>返回 key 所储存的值的类型。<br>时间复杂度：O(1)<br>返回值：<br>none (key不存在)<br>string (字符串)<br>list (列表)<br>set (集合)<br>zset (有序集)<br>hash (哈希表)</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="http://redisdoc.com/" target="_blank" rel="noopener">Redis命令参考</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章来了解下Redis的几个通用命令吧。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="https://uncleqiu.github.io/uncleqiu/categories/Database/"/>
    
    
      <category term="Redis" scheme="https://uncleqiu.github.io/uncleqiu/tags/Redis/"/>
    
      <category term="Nosql" scheme="https://uncleqiu.github.io/uncleqiu/tags/Nosql/"/>
    
  </entry>
  
  <entry>
    <title>Sphinx and CoreSeek</title>
    <link href="https://uncleqiu.github.io/uncleqiu/2018/12/03/Sphinx-and-CoreSeek/"/>
    <id>https://uncleqiu.github.io/uncleqiu/2018/12/03/Sphinx-and-CoreSeek/</id>
    <published>2018-12-03T14:23:59.000Z</published>
    <updated>2018-12-17T11:15:41.083Z</updated>
    
    <content type="html"><![CDATA[<p>Sphinx是一个基于SQL的全文检索引擎，可以结合MySQL,PostgreSQL做全文搜索，它可以提供比数据库本身更专业的搜索功能，使得应用程序更容易实现专业化的全文检索。Sphinx特别为一些脚本语言设计搜索API接口，如PHP,Python,Perl,Ruby等，同时为MySQL也设计了一个存储引擎插件。<br><a id="more"></a></p><h4 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h4><p>1.下载安装包并解压</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入本地安装包目录</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line"><span class="comment">#下载安装包，(由于GFW)这个链接有可能下载不了</span></span><br><span class="line">$ wget http://www.coreseek.cn/uploads/csft/3.2/coreseek-3.2.14.tar.gz</span><br><span class="line"><span class="comment">#解压安装包</span></span><br><span class="line">$ tar zxvf coreseek-3.2.14.tar.gz</span><br></pre></td></tr></tbody></table></figure><p>2.安装中文分词mmseg<br>因为后面安装sphinx需要configure –with-mmseg所以先安装中文分词mmseg<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入mmseg中文分词目录</span></span><br><span class="line">$ <span class="built_in">cd</span> mmseg-3.2.14</span><br><span class="line"><span class="comment">#引导指定mmseg安装目录</span></span><br><span class="line">$ ./bootstrap</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/mmseg</span><br><span class="line"><span class="comment">#此时可能会报错，如果报错执行automake再次configure</span></span><br><span class="line">$ automake</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/mmseg</span><br><span class="line"><span class="comment">#执行编译安装</span></span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure><p></p><p>3.安装csft(sphinx)<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入csft目录</span></span><br><span class="line">$ <span class="built_in">cd</span> ../csft-3.2.14</span><br><span class="line"><span class="comment">#指定csft安装目录、mmseg目录、mysql目录等</span></span><br><span class="line">$ sh buildconf.sh</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/coreseek --with-mmseg=/usr/<span class="built_in">local</span>/mmseg --with-mmseg-includes=/usr/<span class="built_in">local</span>/mmseg/include/mmseg/ --with-mmseg-libs=/usr/<span class="built_in">local</span>/mmseg/lib/ --with-mysql=/phpstudy/mysql</span><br><span class="line"><span class="comment">#如果此时mysql指定报错(yum源安装的mysql服务可能会报此错误)，修改--with-mysql参数为--with-mysql-includes和--with-mysql-libs 如下：</span></span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/coreseek --with-mmseg=/usr/<span class="built_in">local</span>/mmseg --with-mmseg-includes=/usr/<span class="built_in">local</span>/mmseg/include/mmseg/ --with-mmseg-libs=/usr/<span class="built_in">local</span>/mmseg/lib/ --with-mysql-includes=/usr/include/mysql/ --with-mysql-libs=/usr/lib64/mysql/</span><br><span class="line"><span class="comment">#执行编译安装</span></span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line"><span class="comment">#此时有可能会报错('ExprEval' was not declared in this scope)，网上查找大概意思是GCC版本过高不兼容的问题，解决办法：修改文件src/sphinxexpr.cpp，把报error的行数的ExprEval改为this-&gt;ExprEval并保存</span></span><br><span class="line">$ make clean</span><br><span class="line">$ vi src/sphinxexpr.cpp</span><br><span class="line"><span class="comment">#再次执行安装</span></span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sphinx是一个基于SQL的全文检索引擎，可以结合MySQL,PostgreSQL做全文搜索，它可以提供比数据库本身更专业的搜索功能，使得应用程序更容易实现专业化的全文检索。Sphinx特别为一些脚本语言设计搜索API接口，如PHP,Python,Perl,Ruby等，同时为MySQL也设计了一个存储引擎插件。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Sphinx" scheme="https://uncleqiu.github.io/uncleqiu/tags/Sphinx/"/>
    
  </entry>
  
  <entry>
    <title>Use Vagrant and Virtualbox to build your environment</title>
    <link href="https://uncleqiu.github.io/uncleqiu/2018/11/24/Use-Vagrant-and-Virtualbox-to-build-your-environment/"/>
    <id>https://uncleqiu.github.io/uncleqiu/2018/11/24/Use-Vagrant-and-Virtualbox-to-build-your-environment/</id>
    <published>2018-11-24T14:37:25.000Z</published>
    <updated>2018-12-17T11:15:49.588Z</updated>
    
    <content type="html"><![CDATA[<p>Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源VirtualBox虚拟化系统，使用Chef创建自动化虚拟环境。Vagrant可以节省开发者搭建环境的时间，并解决了开发环境不一致问题，有了Vagrant，可以导出box文件分发给团队其它开发者使用。<br><a id="more"></a></p><h4 id="一、下载及安装所需应用程序"><a href="#一、下载及安装所需应用程序" class="headerlink" title="一、下载及安装所需应用程序"></a>一、下载及安装所需应用程序</h4><ul><li><a href="https://www.virtualbox.org/" target="_blank" rel="noopener">Virtualbox官方下载地址</a></li><li><a href="https://www.vagrantup.com/" target="_blank" rel="noopener">Vagrant官方下载地址</a></li><li><a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">Vagrant Box镜像官方下载地址</a></li><li><a href="http://www.vagrantbox.es/" target="_blank" rel="noopener">Vagrant Box镜像下载地址2</a></li><li><a href="https://gitforwindows.org/" target="_blank" rel="noopener">git bash官方下载地址</a></li></ul><h4 id="二、安装连接虚拟机环境"><a href="#二、安装连接虚拟机环境" class="headerlink" title="二、安装连接虚拟机环境"></a>二、安装连接虚拟机环境</h4><p>Now, everything is ready,open your git bash.<br>1.新建开发目录(如D:/dev/)<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /d</span><br><span class="line">$ mkdir dev</span><br></pre></td></tr></tbody></table></figure><p></p><p>2.进入开发目录(D:/dev/),并添加box<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> dev</span><br><span class="line">$ vagrant box add myCentos7 centos7.box</span><br></pre></td></tr></tbody></table></figure><p></p><p>执行完添加box命令后，box中的镜像文件被放到了/Users/astaxie/.vagrant.d/boxes/<br>在Window系统中是放到了C:\Users\当前用户名.vagrant.d\boxes\目录下<br>3.初始化<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant init myCentos7</span><br></pre></td></tr></tbody></table></figure><p></p><p>此时开发目录会多一个Vagrantfile文件(虚拟机配置文件)<br>4.启动虚拟机<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant up</span><br></pre></td></tr></tbody></table></figure><p></p><p>5.通过ssh登录本地环境所在虚拟机<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh</span><br></pre></td></tr></tbody></table></figure><p></p><p>如果是用Xshell登录(默认： IP：172.0.0.1  user：vagrant  pwd：vagrant  port：2222)<br>如果使用密钥登录使用当前开发目录(D:\dev.vagrant\machines\default\virtualbox\private_key)<br>此时Linux(centos)环境已经安装完毕</p><h4 id="三、配置Vagrantfile"><a href="#三、配置Vagrantfile" class="headerlink" title="三、配置Vagrantfile"></a>三、配置Vagrantfile</h4><p>1.box设置<br></p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.box = <span class="string">"myCentos7"</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>该名称是初使化vagrant init后面跟的名称<br>2.hostname设置<br></p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.hostname = <span class="string">"centos7"</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>如果我安装了两台虚拟机一台为centos7，另一台为ubuntu16.04，启动时可以使用vagrant up centos7指定某一台启动<br>3.虚拟机网络设置<br>1).端口映射(端口转发)<br></p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network <span class="string">"forwarded_port"</span>, <span class="symbol">guest:</span> <span class="number">80</span>, <span class="symbol">host:</span> <span class="number">8080</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>虚拟机中的端口映射到宿主机对应的端口使用<br>guest: 80 表示虚拟机中的80端口，host: 8080 表示映射到宿主机的8080端口<br>表示请求宿主机的8080端口转发请求到虚拟机中的80端口<br>2).设置IP地址<br></p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"192.168.1.28"</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>4.设置同步(共享)目录<br>新建项目(代码)目录(D:/dev/project/)<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir project</span><br></pre></td></tr></tbody></table></figure><p></p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.synced_folder <span class="string">"./project"</span>, <span class="string">"/usr/share/nginx/html"</span></span><br></pre></td></tr></tbody></table></figure><p>(/usr/share/nginx/html为虚拟机目录，设置之后两个目录会互相同步)<br>5.配置完成后需要重新启动虚拟机使配置文件生效<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant reload</span><br></pre></td></tr></tbody></table></figure><p></p><p>如需增加其它配置，请查询Vagrantfile配置文件详解</p><h4 id="四、打包分发环境"><a href="#四、打包分发环境" class="headerlink" title="四、打包分发环境"></a>四、打包分发环境</h4><p>当配置好开发环境后，退出并关闭虚拟机，运行如下命令对环境进行打包<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant package</span><br></pre></td></tr></tbody></table></figure><p></p><p>打包完成后会在当前目录生成一个package.box文件，将此文件给其他开发者，其他开发者<br>添加这个box并用其初始化自己的开发目录就能得到一模一样的开发环境</p><h4 id="五、vagrant-常用操作命令"><a href="#五、vagrant-常用操作命令" class="headerlink" title="五、vagrant 常用操作命令"></a>五、vagrant 常用操作命令</h4><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">vagrant box add</td><td style="text-align:center">添加box的操作</td></tr><tr><td style="text-align:center">vagrant init</td><td style="text-align:center">初始化box的操作，会生成vagrant的配置文件Vagrantfile</td></tr><tr><td style="text-align:center">vagrant up</td><td style="text-align:center">启动本地环境</td></tr><tr><td style="text-align:center">vagrant ssh</td><td style="text-align:center">通过 ssh 登录本地环境所在虚拟机</td></tr><tr><td style="text-align:center">vagrant halt</td><td style="text-align:center">关闭本地环境</td></tr><tr><td style="text-align:center">vagrant suspend</td><td style="text-align:center">暂停本地环境</td></tr><tr><td style="text-align:center">vagrant resume</td><td style="text-align:center">恢复本地环境</td></tr><tr><td style="text-align:center">vagrant reload</td><td style="text-align:center">修改了 Vagrantfile 后，使之生效（相当于先 halt，再 up）</td></tr><tr><td style="text-align:center">vagrant destroy</td><td style="text-align:center">彻底移除本地环境</td></tr><tr><td style="text-align:center">vagrant box list</td><td style="text-align:center">显示当前已经添加的box列表</td></tr><tr><td style="text-align:center">vagrant box remove</td><td style="text-align:center">删除相应的box</td></tr><tr><td style="text-align:center">vagrant package</td><td style="text-align:center">打包命令，可以把当前的运行的虚拟机环境进行打包</td></tr><tr><td style="text-align:center">vagrant plugin</td><td style="text-align:center">用于安装卸载插件</td></tr><tr><td style="text-align:center">vagrant status</td><td style="text-align:center">获取当前虚拟机的状态</td></tr><tr><td style="text-align:center">vagrant global-status</td><td style="text-align:center">显示当前用户Vagrant的所有环境状态</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源VirtualBox虚拟化系统，使用Chef创建自动化虚拟环境。Vagrant可以节省开发者搭建环境的时间，并解决了开发环境不一致问题，有了Vagrant，可以导出box文件分发给团队其它开发者使用。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://uncleqiu.github.io/uncleqiu/categories/DevOps/"/>
    
    
      <category term="DevOps" scheme="https://uncleqiu.github.io/uncleqiu/tags/DevOps/"/>
    
      <category term="Vagrant" scheme="https://uncleqiu.github.io/uncleqiu/tags/Vagrant/"/>
    
      <category term="Virtualbox" scheme="https://uncleqiu.github.io/uncleqiu/tags/Virtualbox/"/>
    
  </entry>
  
  <entry>
    <title>Redis安装与配置</title>
    <link href="https://uncleqiu.github.io/uncleqiu/2018/11/23/Redis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://uncleqiu.github.io/uncleqiu/2018/11/23/Redis安装与配置/</id>
    <published>2018-11-23T15:17:54.000Z</published>
    <updated>2018-12-17T11:16:03.144Z</updated>
    
    <content type="html"><![CDATA[<p>Redis是一个C实现的基于内存、可持久化的键值对数据库，在分布式服务中常作为缓存服务。本篇将介绍在CentOS下如何从零开始安装到配置启动服务。<br><a id="more"></a></p><h4 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h4><p>Redis的安装推荐下载源码编译安装。</p><p>进入下载的目录，使用wget下载<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">[root@localhost src]<span class="comment"># wget http://download.redis.io/releases/redis-4.0.10.tar.gz</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>解压并移动至/usr/local/目录下<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]<span class="comment"># tar zxvf redis-4.0.10.tar.gz</span></span><br><span class="line">[root@localhost src]<span class="comment"># mv redis-4.0.10 /usr/local/redis</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>进入redis目录，使用make命令编译<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]<span class="comment"># cd /usr/local/redis</span></span><br><span class="line">[root@localhost redis]<span class="comment"># make</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>编译完成后在src目录下会生成两个文件<span style="color:red">redis-server</span>与<span style="color:red">redis-cli</span>。<br>然后进入src目录，执行make install，这时会把这些可执行程序拷贝到/usr/local/bin目录下，由于/usr/local/bin是在系统的环境变量$PATH下定义的，因此终端在任意位置就可以执行redis-server和redis-cli了。<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis]<span class="comment"># cd src </span></span><br><span class="line">[root@localhost src]<span class="comment"># make install</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>经过以上步骤redis已经安装完毕。</p><h5 id="redis文件意义作用"><a href="#redis文件意义作用" class="headerlink" title="redis文件意义作用"></a>redis文件意义作用</h5><table><thead><tr><th style="text-align:center">文件名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">redis-server</td><td style="text-align:center">redis服务，启用redis服务</td></tr><tr><td style="text-align:center">redis-cli</td><td style="text-align:center">redis客户端，连接redis服务，进行CURD等操作</td></tr><tr><td style="text-align:center">redis-sentinel</td><td style="text-align:center">redis实例的监控管理、通知和实例失效备援服务</td></tr><tr><td style="text-align:center">redis-benchmark</td><td style="text-align:center">性能测试工具</td></tr><tr><td style="text-align:center">redis-check-aof</td><td style="text-align:center">AOF方式持久化，使用此文件修复</td></tr><tr><td style="text-align:center">redis-check-rdb</td><td style="text-align:center">RDB方式持久化，使用此文件修复</td></tr></tbody></table><p>使用启动redis-server，并使用redis-cli连接操作<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># redis-server</span></span><br><span class="line">[root@localhost ~]<span class="comment"># redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; PING</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></tbody></table></figure><p></p><p>此时redis服务已经正常工作，如果redis服务未启动，运行redis-cli时会报Could not connect to Redis at 127.0.0.1:6379: Connection refused的错误。</p><h4 id="二、-配置开机自动启动"><a href="#二、-配置开机自动启动" class="headerlink" title="二、 配置开机自动启动"></a>二、 配置开机自动启动</h4><p>如果需要在系统启动时自动启动redis，需要将redis服务作为守护进程（daemon）来运行。此时需要修改redis配置文件redis.conf。文件位置在/usr/local/redis/redis.conf<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /usr/local/redis/redis.conf</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>其中两个重要的参数<span style="color:red">daemonize</span>默认值是<b>false</b>，<span style="color:red">pidfile</span>默认值是pidfile /var/run/redis_6379.pid<br>搜索找到daemonize 把后面的值<span style="color:red">no</span>改为<span style="color:red">yes</span></p><h5 id="daemonize介绍"><a href="#daemonize介绍" class="headerlink" title="daemonize介绍"></a>daemonize介绍</h5><p>daemonize为守护进程，默认是no。<br><span style="color:red">daemonize 设置yes或者no区别</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<br>daemonize:<span style="color:red">yes</span>:redis采用的是单进程多线程的模式。当redis.conf中选项daemonize设置成yes时，代表开启<span style="color:red">守护进程模式</span>。在该模式下，redis会在后台运行，并将进程pid号写入至redis.conf选项pidfile设置的文件中，此时redis将一直运行，除非手动kill该进程，服务运行中该文件(pidfile)就存在，服务一旦停止该文件就自动删除，因而可以用来判断redis是否正在运行。<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>daemonize:<span style="color:red">no</span>: 当daemonize选项设置成no时，当前界面将进入redis的命令行界面，<span style="color:red">exit强制退出或者关闭连接工具(putty,xshell等)都会导致redis进程退出</span>。</p><p>编辑后保存退出。</p><p>生产环境中推荐使用启动脚本方式启动redis服务，接下来需要配置一个管理启动、关闭、重启的一个脚本。redis源码里已经提供了一个初始化脚本，位置在/usr/local/redis/utils/redis_init_script。</p><p>大致查看一下脚本内容<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#redis服务器监听的端口</span></span><br><span class="line">REDISPORT=6379</span><br><span class="line"><span class="comment">#redis服务端所在位置</span></span><br><span class="line">EXEC=/usr/<span class="built_in">local</span>/bin/redis-server</span><br><span class="line"><span class="comment">#redis客户端所在位置</span></span><br><span class="line">CLIEXEC=/usr/<span class="built_in">local</span>/bin/redis-cli</span><br><span class="line"><span class="comment">#Redis的PID文件位置，可以把${REDISPORT}修改为文件名</span></span><br><span class="line">PIDFILE=/var/run/redis_<span class="variable">${REDISPORT}</span>.pid</span><br><span class="line"><span class="comment">#redis的配置文件位置，可以把${REDISPORT}修改为文件名</span></span><br><span class="line">CONF=<span class="string">"/etc/redis/<span class="variable">${REDISPORT}</span>.conf"</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>根据启动脚本，将修改好的配置文件复制到指定目录下，另外看到这里conf的路径，我们需要把redis目录下的redis.conf文件拷贝到/etc/redis/6379.conf<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /etc/redis</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp /usr/local/redis/redis.conf /etc/redis/6379.conf</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>接着将启动脚本复制到/etc/init.d目录下，将启动脚本命名为redisd（通常都以d结尾表示是后台自启动服务）。<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cp /usr/local/redis/utils/redis_init_script /etc/init.d/redisd</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>在/etc/init.d下的脚本基本都是在系统自动启动的服务，现在设置redis为开机自启动<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost zhxilin]<span class="comment"># chkconfig redisd on</span></span><br></pre></td></tr></tbody></table></figure><p></p><p> 执行chkconfig redisd on 可能会报错误： service redisd does not support chkconfig</p><p>解决方法：在启动脚本开头添加如下两行注释修改其运行级别<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 90 10 </span></span><br><span class="line"><span class="comment"># description: Redis is a persistent key-value database</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>保存完重新拷贝到/etc/init.d/redisd，再次运行chkconfig redisd on。</p><p>配置后，可以执行以下命令测试redis服务是否设置成功：<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#设置为开机自启动服务器</span><br><span class="line">[root@localhost ~]# chkconfig redisd on</span><br><span class="line">#启动redis服务</span><br><span class="line">[root@localhost ~]# service redisd start </span><br><span class="line">#关闭redis服务</span><br><span class="line">[root@localhost ~]# service redisd stop</span><br></pre></td></tr></tbody></table></figure><p></p><p><span style="color:red">等价于</span><br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动redis服务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># /etc/init.d/redisd start </span></span><br><span class="line"><span class="comment">#关闭redis服务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># /etc/init.d/redisd stop</span></span><br></pre></td></tr></tbody></table></figure><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis是一个C实现的基于内存、可持久化的键值对数据库，在分布式服务中常作为缓存服务。本篇将介绍在CentOS下如何从零开始安装到配置启动服务。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="https://uncleqiu.github.io/uncleqiu/categories/Database/"/>
    
    
      <category term="Redis" scheme="https://uncleqiu.github.io/uncleqiu/tags/Redis/"/>
    
      <category term="Nosql" scheme="https://uncleqiu.github.io/uncleqiu/tags/Nosql/"/>
    
  </entry>
  
</feed>
